name: Build Project

on:
  workflow_call:
    inputs:
      py:
        type: string
        default: '3.10'

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ inputs.py }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.py }}
        
    - name: Setup Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 'latest'

    - name: Setup a local virtual environment
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local

    - name: Cache the virtual environment
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}
    
    - name: Get package version
      id: get_version
      run: |
        # Extract version from pyproject.toml or setup.py
        if [ -f "pyproject.toml" ]; then
          VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d '"' -f 2)
        else
          VERSION=$(grep -m 1 'version=' setup.py | cut -d '"' -f 2)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Install the project dependencies
      run: poetry install --with dev --extras all

    - name: Build the project
      run: |
        poetry build

        # Rename wheels to indicate Python version compatibility
        for wheel in dist/*.whl; do
          # Get the original name without extension
          base=$(basename "$wheel" .whl)
          # Rename to indicate Python version compatibility
          mv "$wheel" "dist/smse-${{ steps.get_version.outputs.version }}-linx-x86_64.whl"
        done
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smse-${{ steps.get_version.outputs.version }}-linx-x86_64.whl
        path: dist/*.whl
